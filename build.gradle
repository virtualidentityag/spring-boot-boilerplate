plugins {
	id 'org.springframework.boot' version '2.4.0'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	id 'idea'
	id 'jacoco'
	id 'org.sonarqube' version '3.0'
	id 'org.openapi.generator' version '4.2.1'
	id "com.gorylenko.gradle-git-properties" version "2.2.3"
}

group = 'com.myCompanyName.myProjectName'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '14'

configurations {
	testIntegrationCompile.extendsFrom testCompile
	testIntegrationRuntime.extendsFrom testRuntime
}

repositories {
	mavenCentral()
}

dependencies {
	compile 'org.springframework.boot:spring-boot-starter-actuator'
	compile 'org.springframework.boot:spring-boot-starter-hateoas'
	compile 'org.springframework.boot:spring-boot-starter-validation'

	// add to fix incompatibility of spring boot
	compile 'org.springframework.plugin:spring-plugin-core:1.2.0.RELEASE'

	compile 'io.swagger.core.v3:swagger-annotations:2.1.1'
	compile 'org.openapitools:jackson-databind-nullable:0.2.1'

	compile 'io.springfox:springfox-swagger2:2.9.2'
	compile 'io.springfox:springfox-swagger-ui:2.9.2'

	testCompile('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

sourceSets {
	main {
		java.srcDirs file('src/main/java')
		java.srcDirs file('build/generated/openapi/src/main/java')
		resources.srcDirs file('src/main/resources')
	}
	testIntegration {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/testIntegration/java')
		}
		resources.srcDir file('src/testIntegration/resources')
	}
}

idea {
	module {
		testSourceDirs += project.sourceSets.testIntegration.java.srcDirs
		testSourceDirs += project.sourceSets.testIntegration.resources.srcDirs
	}
}

springBoot {
	buildInfo()
}

test {
	useJUnitPlatform()
}

bootJar {
	archiveFileName = "app.${archiveExtension.get()}"
}

compileJava.dependsOn tasks.openApiGenerate
// Actual task for generating the server
openApiGenerate {
	generatorName.set("spring")

	inputSpec.set(file('./api/api.yaml').getAbsolutePath())
	outputDir.set("$buildDir/generated/openapi")

	apiPackage.set("com.myCompanyName.myProjectName.generated")
	invokerPackage.set("com.myCompanyName.myProjectName.invoker")
	modelPackage.set("com.myCompanyName.myProjectName.generated.model")

	configOptions = [
			dateLibrary: "java8"
	]

	additionalProperties = [
			"interfaceOnly" : "true",
			"unhandledException" : "true"
	]
}

build.dependsOn('testIntegration')
task testIntegration(type: Test) {
	testClassesDirs = sourceSets.testIntegration.output.classesDirs
	classpath = sourceSets.testIntegration.runtimeClasspath

	systemProperty 'spring.profiles.active', 'integration_test'

	useJUnitPlatform()

	// This is not needed, but I like to see which tests have run
	testLogging {
		events "passed", "skipped", "failed"
	}
}

test.finalizedBy jacocoTestReport
testIntegration.finalizedBy jacocoTestReport
jacocoTestReport {
	reports {
		xml.enabled true
		csv.enabled false
		html.destination file("${buildDir}/jacocoHtml")
	}
}

sonarqube {
	properties {
		property "sonar.projectKey", "spring-boot-boilerplate"
		property "sonar.organization", "virtualidentityag"
		property "sonar.host.url", "https://sonarcloud.io"
	}
}

task installGitHooks(type: Copy) {
	from new File(rootProject.rootDir, 'scripts/git-hooks')
	into { new File(rootProject.rootDir, '.git/hooks') }
}
build.dependsOn installGitHooks
